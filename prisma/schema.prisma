// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Category{
  id Int @id @default(autoincrement())
  name String
  slug String @unique
  products Product[]
}

model Product {
  id Int @id @default(autoincrement())
  name String
  price Float
  image String
  description String?
  stock Int @default(0)
  isActive Boolean @default(true)
  categoryId Int
  category Category @relation(fields: [categoryId],references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  orderItems OrderItem[]
}

model Order {
  id Int @id @default(autoincrement())
  userId Int?
  user User? @relation(fields: [userId], references: [id])
  items OrderItem[]
  total Float
  status String @default("pending") // pending, paid, cancelled, failed
  paymentId String? // Mercado Pago payment ID
  preferenceId String? // Mercado Pago preference ID
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model OrderItem {
  id Int @id @default(autoincrement())
  orderId Int
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId Int
  product Product @relation(fields: [productId], references: [id])
  quantity Int
  price Float
  createdAt DateTime @default(now())
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("user")
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
}

model Account {
  id                 Int       @id @default(autoincrement())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int       @id @default(autoincrement())
  sessionToken String    @unique
  userId       Int
  expires      DateTime
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String    @unique
  expires   DateTime

  @@unique([identifier, token])
}

